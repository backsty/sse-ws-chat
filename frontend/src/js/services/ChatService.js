import { Chat } from '../models/Chat.js';
import { Message } from '../models/Message.js';
import { User } from '../models/User.js';
import { EventEmitter } from '../utils/events.js';
import { CookieManager } from '../utils/cookies.js';

export class ChatService extends EventEmitter {
  constructor(wsClient) {
    super();
    this.ws = wsClient;
    this.chats = new Map();
    this.users = new Map();
    this.currentUser = null;
    this.pendingMessages = new Map();
    this.bindEvents();
  }

  bindEvents() {
    // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.ws.on('connect', async () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      this.emit('connect');
      await this.checkSavedSession();
    });

    this.ws.on('disconnect', () => {
      this.emit('disconnect');
    });

    this.ws.on('loginSuccess', (data) => {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', data);
      this.currentUser = User.fromJSON(data.user);
      CookieManager.set('chatUser', JSON.stringify(this.currentUser.toJSON()));
      this.emit('loginSuccess', this.currentUser);

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      this.ws.send('getUserList');
      this.ws.send('getChatList');
    });

    this.ws.on('loginError', (data) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data);
      // –£–¥–∞–ª—è–µ–º –∫—É–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      CookieManager.delete('chatUser');
      this.emit('loginError', data.message);
    });

    this.ws.on('userList', (data) => {
      console.log('üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data);
      this.users.clear();
      data.users.forEach((userData) => {
        const user = User.fromJSON(userData);
        this.users.set(user.id, user);
      });
      this.emit('userListUpdate', Array.from(this.users.values()));
    });

    this.ws.on('userJoined', (data) => {
      const user = new User(data.user);
      this.users.set(user.id, user);
      this.emit('userJoined', user);
      this.ws.send('getUserList');
    });

    this.ws.on('userLeft', (data) => {
      const user = this.users.get(data.userId);
      if (user) {
        user.isOnline = false;
        this.emit('userLeft', user);
      }
    });

    this.ws.on('chatCreated', (data) => {
      console.log('üí¨ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:', data);
      const chat = Chat.fromJSON(data.chat);
      this.chats.set(chat.id, chat);
      this.emit('chatCreated', chat);
    });

    this.ws.on('message', (data) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);

      const chat = this.chats.get(data.chatId);
      if (chat) {
        const message = new Message({
          id: data.messageId,
          from: data.from,
          text: data.text,
          timestamp: data.timestamp,
          status: 'delivered',
        });

        chat.addMessage(message);
        this.emit('newMessage', { chat, message });
      }
    });

    this.ws.on('error', (error) => {
      this.emit('error', error);
    });
  }

  async checkSavedSession() {
    const savedUser = CookieManager.get('chatUser');
    if (savedUser) {
      try {
        const userData = JSON.parse(savedUser);
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', userData);
        await this.login(userData.nickname);
        return true;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        CookieManager.delete('chatUser');
      }
    }
    return false;
  }

  async login(nickname) {
    if (!nickname?.trim()) {
      throw new Error('–ù–∏–∫–Ω–µ–π–º –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', nickname);
    await this.ws.send('login', { nickname: nickname.trim() });
  }

  logout() {
    if (this.currentUser) {
      this.ws.send('logout');
      CookieManager.delete('chatUser');
      this.currentUser = null;
      this.chats.clear();
      this.users.clear();
      this.emit('logout');
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
  startChat(targetUserId) {
    if (!targetUserId) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
    }
    this.ws.send('startChat', { targetUserId });
  }

  // sendMessage(chatId, text) {
  //   if (!chatId || !text?.trim()) {
  //     console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è');
  //     return;
  //   }

  //   const messageId = crypto.randomUUID();
  //   const message = new Message({
  //     id: messageId,
  //     from: this.currentUser.id,
  //     chatId,
  //     text: text.trim(),
  //     timestamp: Date.now(),
  //     status: 'sending',
  //   });

  //   // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ —Å—Ä–∞–∑—É
  //   const chat = this.chats.get(chatId);
  //   if (chat) {
  //     chat.addMessage(message);
  //     this.emit('newMessage', { chat, message });
  //   }

  //   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  //   this.pendingMessages.set(messageId, message);
  //   this.ws.send('message', {
  //     chatId,
  //     text: text.trim(),
  //     messageId,
  //     from: this.currentUser.id,
  //   });
  // }

  sendMessage(chatId, text) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!chatId || !text?.trim()) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è');
      return Promise.reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è'));
    }

    if (!this.currentUser) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return Promise.reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'));
    }

    const chat = this.chats.get(chatId);
    if (!chat) {
      console.warn('‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', chatId);
      return Promise.reject(new Error('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'));
    }

    return new Promise((resolve, reject) => {
      const messageId = crypto.randomUUID();
      const message = new Message({
        id: messageId,
        from: this.currentUser.id,
        chatId,
        text: text.trim(),
        timestamp: Date.now(),
        status: Message.STATUSES.SENDING,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      chat.addMessage(message);
      this.emit('newMessage', { chat, message });

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const timeout = setTimeout(() => {
        this.pendingMessages.delete(messageId);
        message.status = Message.STATUSES.FAILED;
        this.emit('messageUpdate', { chat, message });
        reject(new Error('–¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'));
      }, 10000);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      const onMessageSent = (response) => {
        if (response.messageId === messageId) {
          clearTimeout(timeout);
          this.ws.off('messageSent', onMessageSent);
          this.ws.off('messageError', onMessageError);

          this.pendingMessages.delete(messageId);
          message.status = Message.STATUSES.SENT;
          Object.assign(message, response.message);

          this.emit('messageUpdate', { chat, message });
          resolve(message);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
      const onMessageError = (error) => {
        if (error.messageId === messageId) {
          clearTimeout(timeout);
          this.ws.off('messageSent', onMessageSent);
          this.ws.off('messageError', onMessageError);

          this.pendingMessages.delete(messageId);
          message.status = Message.STATUSES.FAILED;
          this.emit('messageUpdate', { chat, message });
          reject(new Error(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'));
        }
      };

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      this.ws.on('messageSent', onMessageSent);
      this.ws.on('messageError', onMessageError);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
      this.pendingMessages.set(messageId, {
        message,
        timestamp: Date.now(),
        cleanup: () => {
          clearTimeout(timeout);
          this.ws.off('messageSent', onMessageSent);
          this.ws.off('messageError', onMessageError);
        },
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      this.ws.send('message', {
        chatId,
        text: message.text,
        messageId,
        from: this.currentUser.id,
      });
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  markMessagesAsRead(chatId) {
    const chat = this.chats.get(chatId);
    if (chat) {
      chat.markAsRead(this.currentUser.id);
      this.ws.send('markAsRead', { chatId });
    }
  }

  disconnect() {
    if (this.currentUser) {
      this.logout();
    }
    this.ws.disconnect();
  }
}
