import { EventEmitter } from '../utils/events.js';
import { CookieManager } from '../utils/cookies.js';

export class WebSocketClient extends EventEmitter {
  constructor(url) {
    super();
    // this.url = url.endsWith('/ws') ? url : `${url}/ws`;
    this.url = url;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectTimeout = 1000;
    this.isConnected = false;
    this.isConnecting = false;
    this.pendingMessages = new Map();
    this.connect();
  }

  connect() {
    if (this.isConnecting) return;

    this.isConnecting = true;
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...');

    try {
      this.ws = new WebSocket(this.url);
      this.bindEvents();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      this.reconnect();
    }
  }

  bindEvents() {
    this.ws.onopen = () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      this.isConnecting = false;
      this.isConnected = true;
      this.reconnectAttempts = 0;
      this.emit('connect');

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      const savedUser = CookieManager.get('chatUser');
      if (savedUser) {
        try {
          const userData = JSON.parse(savedUser);
          this.send('login', { nickname: userData.nickname });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
          CookieManager.delete('chatUser');
        }
      }

      this.resendPendingMessages();
    };

    this.ws.onclose = () => {
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
      this.isConnected = false;
      this.emit('disconnect');

      // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
      const savedUser = CookieManager.get('chatUser');
      if (savedUser) {
        this.reconnect();
      }
    };

    this.ws.onerror = (error) => {
      console.error('üî¥ WebSocket –æ—à–∏–±–∫–∞:', error);
      this.emit('error', error);
    };

    this.ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        if (data.messageId) {
          this.pendingMessages.delete(data.messageId);
        }

        this.emit('message', data);
        if (data.type) {
          this.emit(data.type, data);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        this.emit('error', error);
      }
    };
  }

  send(type, data = {}) {
    if (!this.isConnected) {
      console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:', { type, data });
      this.addToPending(type, data);

      if (!this.isConnecting) {
        this.reconnect();
      }
      return;
    }

    const messageId = crypto.randomUUID();
    const message = { messageId, type, ...data };

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
      this.ws.send(JSON.stringify(message));
      // this.addToPending(type, data, messageId);
      return messageId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      this.emit('error', error);
      this.addToPending(type, data);
      return null;
    }
  }

  addToPending(type, data, messageId = crypto.randomUUID()) {
    this.pendingMessages.set(messageId, {
      type,
      data,
      timestamp: Date.now(),
      attempts: 0,
    });
  }

  resendPendingMessages() {
    console.log('üîÑ –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
    for (const [messageId, message] of this.pendingMessages) {
      if (message.attempts < 3) {
        // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        message.attempts++;
        this.send(message.type, message.data);
      } else {
        this.pendingMessages.delete(messageId);
        console.warn('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫:', message);
      }
    }
  }

  reconnect() {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      this.emit('error', new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectTimeout * this.reconnectAttempts;
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);

    setTimeout(() => this.connect(), delay);
  }

  disconnect() {
    if (this.ws && this.isConnected) {
      this.ws.close();
    }
  }
}
