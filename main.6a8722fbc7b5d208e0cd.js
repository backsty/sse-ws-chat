(()=>{"use strict";class e{constructor(){this.url="wss://sse-ws-chat.onrender.com",this.ws=null,this.handlers=new Map,this.reconnectAttempts=0,this.maxReconnectAttempts=5}async connect(){try{return console.log(`Подключение к ${this.url}`),this.ws=new WebSocket(this.url),await this.waitForConnection(),this.bindEvents(),!0}catch(e){return console.error("Ошибка подключения:",e),await this.handleReconnect(),!1}}async handleReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const e=Math.min(1e3*Math.pow(2,this.reconnectAttempts),3e4);return await new Promise((t=>setTimeout(t,e))),this.connect()}}waitForConnection(){return new Promise(((e,t)=>{const s=setTimeout((()=>{t(new Error("Таймаут подключения"))}),5e3);this.ws.onopen=()=>{clearTimeout(s),this.reconnectAttempts=0,console.log("WebSocket соединение установлено"),e()},this.ws.onerror=e=>{clearTimeout(s),t(e)}}))}bindEvents(){this.ws.onclose=()=>{console.log("WebSocket соединение закрыто"),this.handleReconnect()},this.ws.onmessage=this.handleMessage.bind(this)}on(e,t){this.handlers.set(e,t)}send(e){this.ws?.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify(e))}login(e){this.send({type:"login",nickname:e})}sendMessage(e){this.send({type:"message",text:e})}close(){this.ws?.close()}}function t(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}new class{constructor(){this.client=null,this.nickname=localStorage.getItem("nickname"),this.messagesList=document.getElementById("messages"),this.usersList=document.getElementById("usersList"),this.messageForm=document.getElementById("messageForm"),this.messageInput=document.getElementById("messageInput"),this.init()}async init(){try{if(!this.nickname){const e=await this.promptNickname();if(!e)return;this.nickname=e,localStorage.setItem("nickname",e)}await this.initWebSocket(this.nickname),this.bindEvents()}catch(e){console.error("Ошибка инициализации:",e),localStorage.removeItem("nickname"),setTimeout((()=>this.init()),3e3)}}async promptNickname(){const e=prompt("Введите ваш никнейм:");return e?.trim()?e.trim():null}async initWebSocket(t){this.client=new e,this.setupWebSocketHandlers();if(!await this.client.connect())throw new Error("Не удалось подключиться к серверу");this.client.login(t)}setupWebSocketHandlers(){this.client.on("login",this.handleLogin.bind(this)),this.client.on("users",this.updateUserList.bind(this)),this.client.on("message",this.addMessage.bind(this))}bindEvents(){this.messageForm.addEventListener("submit",this.handleSubmit.bind(this))}handleSubmit(e){e.preventDefault();const t=this.messageInput.value.trim();t&&(this.client.sendMessage(t),this.messageInput.value="")}handleLogin(e){if(!e.success)return localStorage.removeItem("nickname"),alert(e.message),void this.init();console.log("Успешная авторизация")}updateUserList(e){this.usersList.innerHTML=e.map((e=>function(e,s){return`<li class="user ${s?"current":""}">${s?"You":t(e)}</li>`}(e,e===this.nickname))).join("")}addMessage({from:e,text:s,timestamp:n}){this.messagesList.insertAdjacentHTML("beforeend",function(e,s,n,i){const o=new Date(n).toLocaleTimeString();return`\n        <div class="message ${i?"own":"other"}">\n            <div class="message-header">${i?"You":e}</div>\n            <div class="message-text">${t(s)}</div>\n            <div class="message-time">${o}</div>\n        </div>\n    `}(e,s,n,e===this.nickname)),this.messagesList.scrollTop=this.messagesList.scrollHeight}}})();
//# sourceMappingURL=main.6a8722fbc7b5d208e0cd.js.map