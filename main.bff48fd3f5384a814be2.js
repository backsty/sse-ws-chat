"use strict";(self.webpackChunksse_ws_chat=self.webpackChunksse_ws_chat||[]).push([[792],{186:()=>{const e=5,t=1e3,s=3e4;class n{constructor(){this.ws=null,this.handlers=new Map,this.reconnectAttempts=0,this.connected=!1,this.authorized=!1}getWebSocketUrl(){return`${"https:"===window.location.protocol?"wss:":"ws:"}//sse-ws-chat.onrender.com/ws`}async connect(){return this.ws&&this.close(),new Promise(((e,t)=>{try{this.ws=new WebSocket(this.getWebSocketUrl());const s=setTimeout((()=>{this.close(),t(new Error("Таймаут подключения"))}),5e3);this.ws.onopen=()=>{clearTimeout(s),this.connected=!0,this.bindEvents(),e(!0)},this.ws.onerror=e=>{clearTimeout(s),this.connected=!1,t(e)}}catch(e){t(e)}}))}waitForConnection(){return new Promise(((e,t)=>{const s=setTimeout((()=>{this.close(),t(new Error("Таймаут подключения"))}),5e3);this.ws.onopen=()=>{clearTimeout(s),this.connected=!0,this.bindEvents(),e()},this.ws.onerror=e=>{clearTimeout(s),this.connected=!1,t(e)}}))}async handleReconnect(){if(this.reconnectAttempts>=e)throw new Error("Превышено количество попыток подключения");this.reconnectAttempts++;const n=Math.min(t*Math.pow(2,this.reconnectAttempts),s);return await new Promise((e=>setTimeout(e,n))),this.connect()}bindEvents(){this.ws&&(this.ws.onmessage=this.handleMessage.bind(this),this.ws.onclose=this.handleClose.bind(this),this.ws.onerror=this.handleError.bind(this))}handleMessage(e){try{const t=JSON.parse(e.data),s=this.handlers.get(t.type);s&&s(t)}catch(e){console.error("Ошибка обработки сообщения:",e)}}handleClose(e){this.connected=!1,1e3!==e.code&&(console.log("WebSocket закрыт с кодом:",e.code),this.reconnect())}handleError(e){console.error("WebSocket ошибка:",e),this.connected=!1}on(e,t){if("function"!=typeof t)throw new Error("Callback должен быть функцией");this.handlers.set(e,t)}send(e){if(this.isConnected())try{this.ws.send(JSON.stringify(e))}catch(e){console.error("Ошибка отправки:",e),this.reconnect()}else console.error("Попытка отправки сообщения при неактивном соединении")}login(e,t){return new Promise(((s,n)=>{if(!this.isConnected())return void n(new Error("WebSocket не подключен"));this.handlers.set("login",(e=>{"login"===e.type&&(this.handlers.delete("login"),s(e))})),this.send({type:"login",nickname:e,sessionId:t})}))}sendMessage(e){this.send({type:"message",text:e})}async reconnect(){this.close(),await this.connect()}isConnected(){return this.ws&&this.ws.readyState===WebSocket.OPEN&&this.connected}close(){if(this.ws){this.connected=!1;try{this.ws.close(1e3)}catch(e){console.error("Ошибка закрытия WebSocket:",e)}this.ws=null}}}function i(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function o(e,t,s=7){const n=new Date;n.setTime(n.getTime()+24*s*60*60*1e3);const i=encodeURIComponent(t);document.cookie=`${e}=${i};expires=${n.toUTCString()};path=/;SameSite=Strict;Secure`}function c(e){try{const t=document.cookie.match(new RegExp("(?:^|; )"+e.replace(/([.$?*|{}()[\]\\/+^])/g,"\\$1")+"=([^;]*)"));return t?decodeURIComponent(t[1]):null}catch(e){return console.error("Ошибка чтения cookie:",e),null}}function r(e){document.cookie=`${e}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;SameSite=Strict;Secure`}const h="nickname",a="sessionId";class d{constructor(){this.webSocket=null,this.nickname=c(h),this.sessionId=c(a)||crypto.randomUUID(),this.messagesList=document.getElementById("messages"),this.usersList=document.getElementById("usersList"),this.messageForm=document.getElementById("messageForm"),this.messageInput=document.getElementById("messageInput"),this.initialized=!1,this.authorized=!1}async init(){if(!this.initialized)try{if(!this.nickname||!this.validateNickname(this.nickname).valid){if(this.nickname=await this.promptNickname(),!this.nickname)return;o("nickname",this.nickname),o("sessionId",this.sessionId)}await this.initWebSocket(),this.bindEvents(),this.initialized=!0}catch(e){console.error("Ошибка инициализации:",e),this.cleanup(),alert("Ошибка подключения к чату. Попробуйте позже.")}}async promptNickname(){for(;;){const e=prompt("Введите никнейм (2-20 символов):");if(!e)return null;const t=this.validateNickname(e);if(t.valid)return e;alert(t.message)}}validateNickname(e){return e.length<2||e.length>20?{valid:!1,message:"Длина никнейма должна быть от 2 до 20 символов"}:/^[a-zA-Z0-9_-]+$/.test(e)?{valid:!0}:{valid:!1,message:"Используйте только буквы, цифры, дефис и подчеркивание"}}async initWebSocket(){try{this.webSocket=new n,await this.webSocket.connect(),this.setupWebSocketHandlers();const e=await this.webSocket.login(this.nickname,this.sessionId);if(!e.success)throw new Error(e.message||"Ошибка авторизации");return!0}catch(e){throw console.error("Ошибка подключения:",e),this.cleanup(),e}}setupWebSocketHandlers(){this.webSocket.on("login",this.handleLogin.bind(this)),this.webSocket.on("users",this.updateUserList.bind(this)),this.webSocket.on("message",this.addMessage.bind(this)),this.webSocket.on("error",this.handleError.bind(this))}bindEvents(){this.messageForm.addEventListener("submit",this.handleSubmit.bind(this)),window.addEventListener("beforeunload",(()=>{this.webSocket&&this.webSocket.close()}))}handleSubmit(e){e.preventDefault();const t=this.messageInput.value.trim();t&&(this.webSocket&&this.webSocket.isConnected()?(this.webSocket.sendMessage(t),this.messageInput.value=""):(console.error("Чат не подключен"),this.reconnect()))}async handleLogin(e){try{if(!e.success)return console.error("Ошибка авторизации:",e.message),this.authorized=!1,this.cleanup(),void await this.reconnect();this.authorized=!0,console.log("Успешная авторизация")}catch(e){console.error("Ошибка обработки авторизации:",e),this.cleanup()}}handleError(e){console.error("Ошибка чата:",e),alert(e.message||"Произошла ошибка"),"auth"===e.type&&this.reconnect()}async reconnect(){this.initialized=!1,this.webSocket&&(this.webSocket.close(),this.webSocket=null),await this.initWebSocket(),this.webSocket&&this.webSocket.isConnected()&&this.webSocket.login(this.nickname,this.sessionId)}updateUserList(e){Array.isArray(e)&&(this.usersList.innerHTML=e.map((e=>function(e,t){return`\n    <li class="user ${t?"current":""}">\n      ${t?"Вы":i(e)}\n    </li>\n  `}(e,e===this.nickname))).join(""))}addMessage({from:e,text:t,timestamp:s}){if(!e||!t||!s)return;const n=function(e,t,s,n){const o=new Intl.DateTimeFormat("ru",{hour:"2-digit",minute:"2-digit"}).format(new Date(s));return`\n    <div class="message ${n?"own":"other"}">\n      <div class="message-header">${n?"Вы":i(e)}</div>\n      <div class="message-text">${i(t)}</div>\n      <div class="message-time">${o}</div>\n    </div>\n  `}(e,t,s,e===this.nickname);this.messagesList.insertAdjacentHTML("beforeend",n),this.messagesList.scrollTop=this.messagesList.scrollHeight}cleanup(){try{r(h),r(a),this.nickname=null,this.sessionId=crypto.randomUUID(),this.initialized=!1,this.authorized=!1}catch(e){console.error("Ошибка очистки состояния:",e)}}destroy(){this.webSocket&&(this.webSocket.close(),this.webSocket=null),this.cleanup(),this.initialized=!1,this.authorized=!1,this.messagesList.innerHTML="",this.usersList.innerHTML=""}}class l{constructor(){this.chat=null,this.init()}async init(){try{if(this.chat)return void console.warn("Чат уже инициализирован");this.chat=new d,await this.chat.init(),this.bindEvents()}catch(e){console.error("Ошибка инициализации чата:",e),alert("Не удалось подключиться к чату. Попробуйте перезагрузить страницу.")}}bindEvents(){window.addEventListener("beforeunload",this.cleanup.bind(this)),window.addEventListener("unload",this.cleanup.bind(this))}cleanup(){this.chat&&(this.chat.destroy(),this.chat=null),window.chat&&delete window.chat}}document.addEventListener("DOMContentLoaded",(()=>{new l}))}},e=>{var t;t=186,e(e.s=t)}]);
//# sourceMappingURL=main.bff48fd3f5384a814be2.js.map